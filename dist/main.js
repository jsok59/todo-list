(()=>{"use strict";var t={904:(t,e,n)=>{n.d(e,{c:()=>s});var r=n(648),i=n.n(r),o=n(312),a=n.n(o)()(i());a.push([t.id,"* {\n    padding: 0;\n    margin: 0;\n}\n\n.sidebar {\n    background-color: aliceblue;\n    height: 100vh;\n    width: 30%;\n    padding: 15px;\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n}\n\n.content {\n    background-color: black;\n}\n\nbody {\n    display: flex;\n}\n\n.add-project-btn {\n    display: flex;\n    flex-direction: row;\n}\n\n.plus-img\n{\n    height: 1rem;\n\n}\n\n\n/********* DIALOG START ***********/\n\ndialog img {\n    height: 2rem;\n}\n\n.heading_div {\n    display: flex;\n    flex-direction: row;\n    gap: 50px;\n    align-items: center;\n    \n}\n\ndialog {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -100%);\n    padding: 15px;\n    border-radius: 20px;\n    gap: 15px;\n}\n\n#project-form {\n    display: flex;\n    flex-direction: column;\n    gap: 15px;\n}\n\n.submit-btn {\n    width: 50%;\n    align-self: center;\n    padding: 5px;\n    border-radius: 5px;\n}\n\n\n/********* DIALOG START ***********/","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,UAAU;IACV,SAAS;AACb;;AAEA;IACI,2BAA2B;IAC3B,aAAa;IACb,UAAU;IACV,aAAa;IACb,aAAa;IACb,sBAAsB;IACtB,SAAS;AACb;;AAEA;IACI,uBAAuB;AAC3B;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,aAAa;IACb,mBAAmB;AACvB;;AAEA;;IAEI,YAAY;;AAEhB;;;AAGA,mCAAmC;;AAEnC;IACI,YAAY;AAChB;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,SAAS;IACT,mBAAmB;;AAEvB;;AAEA;IACI,kBAAkB;IAClB,QAAQ;IACR,SAAS;IACT,iCAAiC;IACjC,aAAa;IACb,mBAAmB;IACnB,SAAS;AACb;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,SAAS;AACb;;AAEA;IACI,UAAU;IACV,kBAAkB;IAClB,YAAY;IACZ,kBAAkB;AACtB;;;AAGA,mCAAmC",sourcesContent:["* {\n    padding: 0;\n    margin: 0;\n}\n\n.sidebar {\n    background-color: aliceblue;\n    height: 100vh;\n    width: 30%;\n    padding: 15px;\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n}\n\n.content {\n    background-color: black;\n}\n\nbody {\n    display: flex;\n}\n\n.add-project-btn {\n    display: flex;\n    flex-direction: row;\n}\n\n.plus-img\n{\n    height: 1rem;\n\n}\n\n\n/********* DIALOG START ***********/\n\ndialog img {\n    height: 2rem;\n}\n\n.heading_div {\n    display: flex;\n    flex-direction: row;\n    gap: 50px;\n    align-items: center;\n    \n}\n\ndialog {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -100%);\n    padding: 15px;\n    border-radius: 20px;\n    gap: 15px;\n}\n\n#project-form {\n    display: flex;\n    flex-direction: column;\n    gap: 15px;\n}\n\n.submit-btn {\n    width: 50%;\n    align-self: center;\n    padding: 5px;\n    border-radius: 5px;\n}\n\n\n/********* DIALOG START ***********/"],sourceRoot:""}]);const s=a},312:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n="",r=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),r&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=t(e),r&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(t,n,r,i,o){"string"==typeof t&&(t=[[null,t,void 0]]);var a={};if(r)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(a[c]=!0)}for(var d=0;d<t.length;d++){var l=[].concat(t[d]);r&&a[l[0]]||(void 0!==o&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=o),n&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=n):l[2]=n),i&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=i):l[4]="".concat(i)),e.push(l))}},e}},648:t=>{t.exports=function(t){var e=t[1],n=t[3];if(!n)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(i," */");return[e].concat([o]).join("\n")}return[e].join("\n")}},596:t=>{var e=[];function n(t){for(var n=-1,r=0;r<e.length;r++)if(e[r].identifier===t){n=r;break}return n}function r(t,r){for(var o={},a=[],s=0;s<t.length;s++){var c=t[s],d=r.base?c[0]+r.base:c[0],l=o[d]||0,p="".concat(d," ").concat(l);o[d]=l+1;var u=n(p),A={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==u)e[u].references++,e[u].updater(A);else{var m=i(A,r);r.byIndex=s,e.splice(s,0,{identifier:p,updater:m,references:1})}a.push(p)}return a}function i(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;n.update(t=e)}else n.remove()}}t.exports=function(t,i){var o=r(t=t||[],i=i||{});return function(t){t=t||[];for(var a=0;a<o.length;a++){var s=n(o[a]);e[s].references--}for(var c=r(t,i),d=0;d<o.length;d++){var l=n(o[d]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}o=c}}},176:t=>{var e={};t.exports=function(t,n){var r=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},808:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},120:(t,e,n)=>{t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},520:t=>{t.exports=function(t){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var i=void 0!==n.layer;i&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,i&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var o=n.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleTagTransform(r,t,e.options)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},936:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}}},e={};function n(r){var i=e[r];if(void 0!==i)return i.exports;var o=e[r]={id:r,exports:{}};return t[r](o,o.exports,n),o.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t;n.g.importScripts&&(t=n.g.location+"");var e=n.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var r=e.getElementsByTagName("script");if(r.length)for(var i=r.length-1;i>-1&&!t;)t=r[i--].src}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=t})(),n.nc=void 0,(()=>{const t=class{constructor(t){this.title=t,this.list=[]}set title(t){this._title=t}get title(){return this._title}addTodo(t){this.list.push(t)}removeTodo(t){const e=this.list.indexOf(t);this.list.splice(e,1)}},e=class{constructor(t,e,n,r){this.title=t,this.description=e,this.dueDate=n,this.priority=r,this.complete=!1}set title(t){this._title=t}get title(){return this._title}set description(t){this._description=t}get descriptione(){return this._description}set dueDate(t){this._dueDate=t}get dueDate(){return this._dueDate}set priority(t){this._priority=t}get priority(){return this._priority}set complete(t){this._complete=t}get complete(){return this._complete}},r=n.p+"5395da8b16ace3414228.png",i=n.p+"c75555bf2b2ad120510e.svg";function o(t){const e=document.querySelector(".sidebar"),n=document.createElement("h1");n.textContent="My Projects",n.classList="sidebar-title",e.appendChild(n),null!=t&&function(t,e){t.list.forEach((t=>{const n=document.createElement("div");n.setAttribute("class","project"),n.textContent=t.title,e.appendChild(n)}))}(t,e);const i=document.createElement("div"),o=document.createElement("p");o.textContent="Add Project",i.classList="add-project-btn",i.addEventListener("click",(t=>{document.querySelector(".project-dialog").showModal()}));const a=new Image;a.src=r,a.classList="plus-img",i.appendChild(a),i.appendChild(o),e.appendChild(i)}var a=n(596),s=n.n(a),c=n(520),d=n.n(c),l=n(176),p=n.n(l),u=n(120),A=n.n(u),m=n(808),f=n.n(m),h=n(936),g=n.n(h),b=n(904),C={};C.styleTagTransform=g(),C.setAttributes=A(),C.insert=p().bind(null,"head"),C.domAPI=d(),C.insertStyleElement=f(),s()(b.c,C),b.c&&b.c.locals&&b.c.locals;const v=new class{constructor(t){this.title=t,this.list=[]}set title(t){this._title=t}get title(){return this._title}addProject(t){this.list.push(t)}removeProject(t){const e=this.list.indexOf(t);this.list.splice(e,1)}}("Project List"),y=new t("hi"),x=new t("Basketball"),I=new e("todo1","wasdfa","wfasd",1),w=new e("todo2","wasdfa","wfasd",1);y.addTodo(I),y.addTodo(w),y.removeTodo(I),y.list[0].priority=0,v.addProject(y),v.addProject(x),function(e){const n=document.querySelector("body"),r=document.createElement("dialog"),a=document.createElement("form");r.setAttribute("class","project-dialog"),a.setAttribute("method","dialog"),a.setAttribute("id","project-form"),r.appendChild(a),n.appendChild(r);const s=document.createElement("div");s.setAttribute("class","heading_div");const c=document.createElement("h1");c.textContent="New project",c.setAttribute("class","form-heading"),s.appendChild(c);const d=new Image;d.src=i,d.addEventListener("click",(t=>{r.close()})),s.appendChild(d),a.appendChild(s);const l=document.createElement("div"),p=document.createElement("label"),u=document.createElement("input");p.setAttribute("for","form-title"),p.textContent="Title: ",u.setAttribute("type","text"),u.setAttribute("id","form-title"),u.setAttribute("name","form-title"),l.appendChild(p),l.appendChild(u),a.appendChild(l);const A=document.createElement("button");A.textContent="Add Project",A.setAttribute("class","submit-btn"),A.setAttribute("type","submit"),A.addEventListener("click",(n=>{n.preventDefault();const i=document.querySelector(".sidebar"),s=new t(a["form-title"].value);console.log(a["form-title"].value),e.addProject(s),a.reset(),r.close(),i.innerHTML="",o(e)})),a.appendChild(A)}(v),o(v),console.log(v)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,